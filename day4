/* ____    ___       _      _       ____  
  / ___|  / _ \     / \    | |     / ___| 
 | |  _  | | | |   / _ \   | |     \___ \ 
 | |_| | | |_| |  / ___ \  | |___   ___) |
  \____|  \___/  /_/   \_\ |_____| |____/ 
                       
1) Continuous drawing
2) Use HSB to make new squares change colors
3) Use mouse button to draw
4) Make continuous strokes instead of dots

  ____    _____   ____    _____   _____    ____   _   _ 
 / ___|  |_   _| |  _ \  | ____| |_   _|  / ___| | | | |
 \___ \    | |   | |_) | |  _|     | |   | |     | |_| |
  ___) |   | |   |  _ <  | |___    | |   | |___  |  _  |
 |____/    |_|   |_| \_\ |_____|   |_|    \____| |_| |_|

6)  Have the strokeWeight oscillate between 5 and 15, emulating the
    stroke of a quill.
7)  Use other shapes in different configurations to create other effects.
8)  Have the color only change when you press certain keys.
9)  Have color change by assigning hue randomly.
10) Mess with the saturation, brightness, and background colors to create
    different color families.
11) Kind of like 6, but make the quill behave as in reality, where moving
    the quill (mouse) faster makes the stroke thinner.
*/

// Name any p5.js functions we use in the global so Glitch can recognize them.
/* global
 *    HSB,
 *    background,
 *    colorMode,
 *    createCanvas,
 *    fill,
 *    mouseX,
 *    mouseY,
 *    stroke,
 *    rect,
 *    strokeWeight,
 *    circle,
 *    random,
 *    width,
 *    height,
 *    line,
 *    mouseIsPressed,
 *    weight
 */

let brushHue;
let weight;
let priorX, priorY;
let dx, dy;

function setup() {
  // Canvas & color settings
  createCanvas(300, 300);
  colorMode(HSB, 360, 100, 100);
  brushHue = 0;
  weight = 5;
  
  // shows rectangle being drawn continously instead of 1x
  // had to move from draw to setup
  background(95);

  priorX = 0;
  priorY = 0;
  
}

function draw() {
  chooseColors();

  if (mouseIsPressed) {
    // rect(mouseX, mouseY, 5, 5);
    // I want to draw a line from where the mouse last was
    // to where it is now
    // line (lastX, lastY, nowX, nowY)
    line(priorX, priorY, mouseX, mouseY);
    // if (weight == 15)
    // {
    //   weight = 5;
    // }
    // weight += 1;
    // strokeWeight(weight); 
  }
  // strokeWeight(25 - (distance()/3));
  strokeWeight(25/Math.sqrt(distance()));
  // priorX + priorY was initialized as 0
  // to update the prior location we need to set it to whereever the locations are
  priorX = mouseX;
  priorY = mouseY;
}

function distance() {
  dx = Math.abs(priorX - mouseX);
  dy = Math.abs(priorY - mouseY);
  return Math.sqrt((dx * dx) - (dy * dy));
}

function chooseColors() {
  // brushHue is the color, by incrementing it we are changing it slightly each time
  brushHue += 1;

  // 360 is the max we said in the beginning
  // by setting it back to 0 then it keeps going through colors & doesn't stop at pink
  if (brushHue == 360) {
    brushHue = 0;
  }

  stroke(brushHue, 50, 80);
  fill(brushHue, 50, 80);
}

// if a key is pressed, then glitch will see if a function exists to happen
// but don't have to call it in draw
// function p5 already made
function keyPressed() {
  // background makes a rectangle over the canvas
  // pressing any key will erase the canvas
  background(95);
}

// p5 function
function mousePressed() {
  // circle will appear at random co within the dimensions of canvas
  // circle(random(width), random(height), 30);
}
